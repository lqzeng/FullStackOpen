{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","axios","get","then","response","data","newObject","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","map","i","key","find","n","changedNote","returnedNote","catch","error","alert","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"iNAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEzD,OACO,4BACKH,EAAKI,QACN,4BAAQC,QAASJ,GAAmBC,KCejC,EAfA,WAEX,OADgBI,IAAMC,IANV,aAOGC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa9B,EAVA,SAAAC,GAEX,OADgBL,IAAMM,KAXV,YAWwBD,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAhBJ,YAgBI,YAAwBD,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SC+F9BK,EA9GH,WAAM,MAGSC,mBAAS,IAHlB,mBAGVC,EAHU,KAGHC,EAHG,OAKaF,mBAAW,uBALxB,mBAKVG,EALU,KAKDC,EALC,OAOaJ,oBAAS,GAPtB,mBAOVK,EAPU,KAODC,EAPC,KAWdC,qBAAU,WACNC,IAEKhB,MAAK,SAAAiB,GACFP,EAASO,QAEnB,IAGFC,QAAQC,IAAI,SAAUV,EAAMW,OAAQ,SAEpC,IAsDGC,EAAcR,EAClBJ,EACAA,EAAMa,QAAO,SAAA9B,GAAI,OAAIA,EAAKG,aAE5B,OACC,6BACC,uCACA,6BACC,4BAAQE,QAAS,kBAAMiB,GAAYD,KAAnC,QACOA,EAAU,YAAc,QAIhC,4BACKQ,EAAYE,KAAK,SAAC/B,EAAKgC,GAAN,OACL,kBAAC,EAAD,CACIC,IAAKD,EACLhC,KAAMA,EACNC,iBAAkB,kBAxEX,SAACY,GAGxB,IAAMb,EAAOiB,EAAMiB,MAAK,SAAAC,GAAC,OAAIA,EAAEtB,KAAOA,KAIhCuB,EAAW,2BAAQpC,GAAR,IAAcG,WAAYH,EAAKG,YAKhDqB,EACYX,EAAIuB,GACX5B,MAAK,SAAA6B,GACFnB,EAASD,EAAMc,KAAI,SAAA/B,GAAI,OAAGA,EAAKa,KAAOA,EAAKb,EAAMqC,SAEpDC,OAAM,SAAAC,GACHC,MAAM,aAAD,OACYxC,EAAKI,QADjB,0CAGLc,EAASD,EAAMa,QAAO,SAAAK,GAAC,OAAIA,EAAEtB,KAAOA,SAmDJ4B,CAAmBzC,EAAKa,WAKrE,0BAAM6B,SAlDW,SAACC,GAEbA,EAAMC,iBAEN,IAAMC,EAAa,CACfzC,QAASe,EACT2B,KAAM,IAAIC,KACV5C,UAAW6C,KAAKC,SAAW,GAC3BpC,GAAII,EAAMW,OAAS,GAGvBJ,EACYqB,GACPrC,MAAK,SAAA6B,GACFnB,EAASD,EAAMiC,OAAOb,IACtBjB,EAAW,SAoCvB,2BACC+B,MAAShC,EACTiC,SA/BwB,SAACT,GACtBjB,QAAQC,IAAIgB,EAAMU,OAAOF,OACzB/B,EAAWuB,EAAMU,OAAOF,UA+B5B,4BAAQG,KAAO,UAAf,WCjGJC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.7dc5dbfa.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n    const label = note.important ? 'make not important' : 'make important'\n\n\treturn (\n        <li>\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n        </li>\n\t\t)\n}\n\nexport default Note","import axios from 'axios'\n\n//since both frontend and backend are at the same address\nconst baseUrl = 'api/notes'\n\n//heroku URL\n//const baseUrl = 'https://mysterious-waters-20397.herokuapp.com/api/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react'\nimport axios from'axios'\nimport Note from './components/Note'\nimport noteService from './services/notes'\n\nconst App = () => {\n\t\n\t// initial value passed in from props \n\tconst [notes, setNotes] = useState([])\n\t\n\tconst [newNote, setNewNote] = useState ( 'write new note here' )\n\t\n\tconst [showAll, setShowAll] = useState(true)\n\n    //chained method \n    //event handler promise.then \n    useEffect(() => {\n        noteService\n            .getAll()\n            .then(initialNotes => {\n                setNotes(initialNotes)\n            })\n    },[])\n        \n        \n    console.log('render', notes.length, 'notes')\n\n    const toggleImportanceOf = (id) => {\n\n        // array find method to find the note we want to modify, and then assign it to note variable\n        const note = notes.find(n => n.id === id)\n\n        // create a new object, which is a copy (...) and the important property gets inverted from its \n        // previous value \n        const changedNote = { ...note, important: !note.important }\n\n        // new array is created conditionally, so that if note.id !== id is true, we copy the item from \n        // the old array into the new array. if false, then the note object returned by the server is \n        // added to the array instead.\n        noteService\n            .update(id, changedNote)\n            .then(returnedNote => {\n                setNotes(notes.map(note=> note.id !== id ? note: returnedNote))\n            })\n            .catch(error => {\n                alert(\n                    `the note '${note.content}' was already deleted from the server`\n                )\n                setNotes(notes.filter(n => n.id !== id))\n            })\n\n    }\n\n    // event handler addNote\n    const addNote = (event) => {\n        //event.preventDefault prevents the refresh of page\n        event.preventDefault()\n\n        const noteObject = {\n            content: newNote,\n            date: new Date(),\n            important: Math.random() < 0.5,\n            id: notes.length + 1\n        }\n\n        noteService\n            .create(noteObject)\n            .then(returnedNote => {\n                setNotes(notes.concat(returnedNote))\n                setNewNote('')\n            })\n\n    }\n\n\n\n    const handleNoteChange = (event) => {\n        console.log(event.target.value)\n        setNewNote(event.target.value)\n    }\n   \n\tconst notesToShow = showAll\n\t? notes\n\t: notes.filter(note => note.important)\n\t\n\treturn (\n\t\t<div>\n\t\t\t<h1> Notes </h1>\n\t\t\t<div>\n\t\t\t\t<button onClick={() => setShowAll(!showAll)}>\n\t\t\t\t\tshow {showAll ? 'important' : 'all'}\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t\n\t\t\t<ul>\n\t\t\t    {notesToShow.map( (note,i) =>\n                    <Note\n                        key={i}\n                        note={note}\n                        toggleImportance={() => toggleImportanceOf(note.id)}\n                    />\n\t\t\t    )}\n\t\t\t</ul>\n\t\t\t\n\t\t\t<form onSubmit = {addNote}>\n\t\t\t\t<input \n\t\t\t\t\tvalue = {newNote}\n\t\t\t\t\tonChange = {handleNoteChange}\n\t\t\t\t/>\n\t\t\t\t<button type = \"submit\">save</button>\n\t\t\t</form>\n\t\t</div>\n\t)\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport axios from 'axios'\n\n\n//const promise = axios.get('http://localhost:3001/notes')\n//console.log(promise)\n\n//const promise2 = axios.get('http://localhost:3001/foobar')\n//console.log(promise2)\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n)"],"sourceRoot":""}